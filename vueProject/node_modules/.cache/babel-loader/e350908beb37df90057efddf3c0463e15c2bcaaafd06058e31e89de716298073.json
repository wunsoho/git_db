{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Chart, BarController, DoughnutController, LineController, PieController, PolarAreaController, RadarController, BubbleController, ScatterController } from 'chart.js';\nimport { defineComponent, shallowRef, ref, watch, onMounted, onBeforeUnmount, toRaw, h, isProxy } from 'vue';\nvar ChartEmits;\n(function (ChartEmits) {\n  ChartEmits[\"ChartRendered\"] = \"chart:rendered\";\n  ChartEmits[\"ChartUpdated\"] = \"chart:updated\";\n  ChartEmits[\"ChartDestroyed\"] = \"chart:destroyed\";\n  ChartEmits[\"LabelsUpdated\"] = \"labels:updated\";\n})(ChartEmits || (ChartEmits = {}));\nfunction chartCreate(createChartFunction, chartData, chartOptions, context) {\n  createChartFunction(chartData, chartOptions);\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered);\n  }\n}\nfunction chartUpdate(chart, context) {\n  chart.update();\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated);\n  }\n}\nfunction chartDestroy(chart, context) {\n  chart.destroy();\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed);\n  }\n}\nfunction getChartData(data, datasetIdKey) {\n  const nextData = {\n    labels: typeof data.labels === \"undefined\" ? [] : [...data.labels],\n    datasets: []\n  };\n  setChartDatasets(nextData, {\n    ...data\n  }, datasetIdKey);\n  return nextData;\n}\nfunction setChartDatasets(oldData, newData, datasetIdKey) {\n  const addedDatasets = [];\n  oldData.datasets = newData.datasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = oldData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n    // There is no original to update, so simply add new one\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return {\n        ...nextDataset\n      };\n    }\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\nfunction setChartLabels(chart, labels, context) {\n  chart.data.labels = labels;\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated);\n  }\n}\nfunction setChartOptions(chart, options) {\n  chart.options = {\n    ...options\n  };\n}\nfunction compareData(newData, oldData) {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label;\n  });\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label;\n  });\n  // Check if Labels are equal and if dataset length is equal\n  return oldData.datasets.length === newData.datasets.length && newDatasetLabels.every((value, index) => value === oldDatasetLabels[index]);\n}\nconst templateError = \"Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components\";\nconst chartUpdateError = \"Update ERROR: chart instance not found\";\nconst generateChart = (chartId, chartType, chartController) => {\n  return defineComponent({\n    props: {\n      chartData: {\n        type: Object,\n        required: true\n      },\n      chartOptions: {\n        type: Object,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: \"label\"\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: \"\"\n      },\n      styles: {\n        type: Object,\n        default: () => {}\n      },\n      plugins: {\n        type: Array,\n        default: () => []\n      }\n    },\n    setup(props, context) {\n      Chart.register(chartController);\n      const _chart = shallowRef(null);\n      const canvasEl = ref(null);\n      function renderChart(data, options) {\n        if (_chart.value !== null) {\n          chartDestroy(toRaw(_chart.value), context);\n        }\n        if (canvasEl.value === null) {\n          throw new Error(templateError);\n        } else {\n          const chartData = getChartData(data, props.datasetIdKey);\n          const canvasEl2DContext = canvasEl.value.getContext(\"2d\");\n          if (canvasEl2DContext !== null) {\n            _chart.value = new Chart(canvasEl2DContext, {\n              type: chartType,\n              data: isProxy(data) ? new Proxy(chartData, {}) : chartData,\n              options,\n              plugins: props.plugins\n            });\n          }\n        }\n      }\n      function chartDataHandler(newValue, oldValue) {\n        const newData = isProxy(newValue) ? toRaw(newValue) : {\n          ...newValue\n        };\n        const oldData = isProxy(oldValue) ? toRaw(oldValue) : {\n          ...oldValue\n        };\n        if (Object.keys(oldData).length > 0) {\n          const chart = toRaw(_chart.value);\n          const isEqualLabelsAndDatasetsLength = compareData(newData, oldData);\n          if (isEqualLabelsAndDatasetsLength && chart !== null) {\n            setChartDatasets(chart === null || chart === void 0 ? void 0 : chart.data, newData, props.datasetIdKey);\n            if (newData.labels !== undefined) {\n              setChartLabels(chart, newData.labels, context);\n            }\n            updateChart();\n          } else {\n            if (chart !== null) {\n              chartDestroy(chart, context);\n            }\n            chartCreate(renderChart, props.chartData, props.chartOptions, context);\n          }\n        } else {\n          if (_chart.value !== null) {\n            chartDestroy(toRaw(_chart.value), context);\n          }\n          chartCreate(renderChart, props.chartData, props.chartOptions, context);\n        }\n      }\n      function chartOptionsHandler(options) {\n        const chart = toRaw(_chart.value);\n        if (chart !== null) {\n          setChartOptions(chart, options);\n          updateChart();\n        } else {\n          chartCreate(renderChart, props.chartData, props.chartOptions, context);\n        }\n      }\n      function updateChart() {\n        const chart = toRaw(_chart.value);\n        if (chart !== null) {\n          chartUpdate(chart, context);\n        } else {\n          console.error(chartUpdateError);\n        }\n      }\n      watch(() => props.chartData, (newValue, oldValue) => chartDataHandler(newValue, oldValue), {\n        deep: true\n      });\n      watch(() => props.chartOptions, newValue => chartOptionsHandler(newValue), {\n        deep: true\n      });\n      onMounted(() => {\n        if (\"datasets\" in props.chartData && props.chartData.datasets.length > 0) {\n          chartCreate(renderChart, props.chartData, props.chartOptions, context);\n        }\n      });\n      onBeforeUnmount(() => {\n        if (_chart.value !== null) {\n          chartDestroy(toRaw(_chart.value), context);\n        }\n      });\n      context.expose({\n        chart: _chart,\n        updateChart\n      });\n      return () => h(\"div\", {\n        style: props.styles,\n        class: props.cssClasses\n      }, [h(\"canvas\", {\n        id: props.chartId,\n        width: props.width,\n        height: props.height,\n        ref: canvasEl\n      })]);\n    }\n  });\n};\nconst Bar = /* #__PURE__ */generateChart(\"bar-chart\", \"bar\", BarController);\nconst Doughnut = /* #__PURE__ */generateChart(\"doughnut-chart\", \"doughnut\", DoughnutController);\nconst Line = /* #__PURE__ */generateChart(\"line-chart\", \"line\", LineController);\nconst Pie = /* #__PURE__ */generateChart(\"pie-chart\", \"pie\", PieController);\nconst PolarArea = /* #__PURE__ */generateChart(\"polar-chart\", \"polarArea\", PolarAreaController);\nconst Radar = /* #__PURE__ */generateChart(\"radar-chart\", \"radar\", RadarController);\nconst Bubble = /* #__PURE__ */generateChart(\"bubble-chart\", \"bubble\", BubbleController);\nconst Scatter = /* #__PURE__ */generateChart(\"scatter-chart\", \"scatter\", ScatterController);\nexport { Bar, Bubble, Doughnut, Line, Pie, PolarArea, Radar, Scatter, generateChart };","map":{"version":3,"names":["ChartEmits","chartCreate","createChartFunction","chartData","chartOptions","context","undefined","emit","ChartRendered","chartUpdate","chart","update","ChartUpdated","chartDestroy","destroy","ChartDestroyed","getChartData","data","datasetIdKey","nextData","labels","datasets","setChartDatasets","oldData","newData","addedDatasets","map","nextDataset","currentDataset","find","dataset","includes","push","Object","assign","setChartLabels","LabelsUpdated","setChartOptions","options","compareData","newDatasetLabels","label","oldDatasetLabels","length","every","value","index","templateError","chartUpdateError","generateChart","chartId","chartType","chartController","defineComponent","props","type","required","default","String","width","Number","height","cssClasses","styles","plugins","Array","setup","Chart","register","_chart","shallowRef","canvasEl","ref","renderChart","toRaw","Error","canvasEl2DContext","getContext","isProxy","Proxy","chartDataHandler","newValue","oldValue","keys","isEqualLabelsAndDatasetsLength","updateChart","chartOptionsHandler","console","error","watch","deep","onMounted","onBeforeUnmount","expose","h","style","class","id","Bar","BarController","Doughnut","DoughnutController","Line","LineController","Pie","PieController","PolarArea","PolarAreaController","Radar","RadarController","Bubble","BubbleController","Scatter","ScatterController"],"sources":["../src/utils.ts","../src/BaseCharts.ts"],"sourcesContent":["import type { ChartType, ChartDataset, DefaultDataPoint } from 'chart.js'\n\nimport type { TChartData, TChartOptions, TypedChartJS } from './types'\n\nimport { SetupContext } from 'vue'\n\nexport enum ChartEmits {\n  ChartRendered = 'chart:rendered',\n  ChartUpdated = 'chart:updated',\n  ChartDestroyed = 'chart:destroyed',\n  LabelsUpdated = 'labels:updated'\n}\n\nexport function chartCreate<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  createChartFunction: (\n    data: TChartData<TType, TData, TLabel>,\n    options: TChartOptions<TType>\n  ) => void,\n  chartData: TChartData<TType, TData, TLabel>,\n  chartOptions: TChartOptions<TType>,\n  context?: SetupContext\n): void {\n  createChartFunction(chartData, chartOptions)\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartRendered)\n  }\n}\n\nexport function chartUpdate<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.update()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartUpdated)\n  }\n}\n\nexport function chartDestroy<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(chart: TypedChartJS<TType, TData, TLabel>, context?: SetupContext): void {\n  chart.destroy()\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.ChartDestroyed)\n  }\n}\n\nexport function getChartData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  data: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): TChartData<TType, TData, TLabel> {\n  const nextData = {\n    labels: typeof data.labels === 'undefined' ? [] : [...data.labels],\n    datasets: []\n  }\n\n  setChartDatasets(nextData, { ...data }, datasetIdKey)\n  return nextData\n}\n\nexport function setChartDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  oldData: TChartData<TType, TData, TLabel>,\n  newData: TChartData<TType, TData, TLabel>,\n  datasetIdKey: string\n): void {\n  const addedDatasets: ChartDataset<TType, TData>[] = []\n\n  oldData.datasets = newData.datasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = oldData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      )\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset }\n      }\n\n      addedDatasets.push(currentDataset)\n\n      Object.assign(currentDataset, nextDataset)\n\n      return currentDataset\n    }\n  ) as ChartDataset<TType, TData>[]\n}\n\nexport function setChartLabels<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  labels: TLabel[] | undefined,\n  context?: SetupContext\n): void {\n  chart.data.labels = labels\n\n  if (context !== undefined) {\n    context.emit(ChartEmits.LabelsUpdated)\n  }\n}\n\nexport function setChartOptions<\n  TType extends ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chart: TypedChartJS<TType, TData, TLabel>,\n  options: TChartOptions<TType>\n): void {\n  chart.options = { ...options }\n}\n\nexport function compareData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  newData: TChartData<TType, TData, TLabel>,\n  oldData: TChartData<TType, TData, TLabel>\n): boolean {\n  // Get new and old DataSet Labels\n  const newDatasetLabels = newData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  const oldDatasetLabels = oldData.datasets.map(dataset => {\n    return dataset.label\n  })\n\n  // Check if Labels are equal and if dataset length is equal\n  return (\n    oldData.datasets.length === newData.datasets.length &&\n    newDatasetLabels.every((value, index) => value === oldDatasetLabels[index])\n  )\n}\n\nexport const templateError =\n  'Please remove the <template></template> tags from your chart component. See https://vue-chartjs.org/guide/#vue-single-file-components'\n\nexport const chartUpdateError = 'Update ERROR: chart instance not found'\n","import {\n  Chart as ChartJS,\n  BarController,\n  BubbleController,\n  DoughnutController,\n  LineController,\n  PieController,\n  PolarAreaController,\n  RadarController,\n  ScatterController\n} from 'chart.js'\n\nimport type {\n  ChartType,\n  ChartComponentLike,\n  DefaultDataPoint,\n  ChartOptions,\n  Plugin\n} from 'chart.js'\n\nimport {\n  defineComponent,\n  ref,\n  shallowRef,\n  h,\n  onMounted,\n  onBeforeUnmount,\n  watch,\n  isProxy,\n  toRaw,\n  PropType\n} from 'vue'\n\nimport {\n  chartCreate,\n  chartDestroy,\n  chartUpdate,\n  getChartData,\n  setChartLabels,\n  setChartDatasets,\n  compareData,\n  templateError,\n  chartUpdateError,\n  setChartOptions\n} from './utils'\n\nimport type {\n  TChartData,\n  TChartOptions,\n  TypedChartJS,\n  TypedChartComponent\n} from './types'\n\nexport const generateChart = <\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown\n>(\n  chartId: string,\n  chartType: TType,\n  chartController: ChartComponentLike\n): TypedChartComponent<TType, TData, TLabel> =>\n  defineComponent({\n    props: {\n      chartData: {\n        type: Object as PropType<TChartData<TType, TData, TLabel>>,\n        required: true\n      },\n      chartOptions: {\n        type: Object as PropType<TChartOptions<TType>>,\n        default: () => {}\n      },\n      datasetIdKey: {\n        type: String,\n        default: 'label'\n      },\n      chartId: {\n        type: String,\n        default: chartId\n      },\n      width: {\n        type: Number,\n        default: 400\n      },\n      height: {\n        type: Number,\n        default: 400\n      },\n      cssClasses: {\n        type: String,\n        default: ''\n      },\n      styles: {\n        type: Object as PropType<Partial<CSSStyleDeclaration>>,\n        default: () => {}\n      },\n      plugins: {\n        type: Array as PropType<Plugin<TType>[]>,\n        default: () => []\n      }\n    },\n    setup(props, context) {\n      ChartJS.register(chartController)\n\n      const _chart = shallowRef<TypedChartJS<TType, TData, TLabel> | null>(null)\n      const canvasEl = ref<HTMLCanvasElement | null>(null)\n\n      function renderChart(\n        data: TChartData<TType, TData, TLabel>,\n        options: TChartOptions<TType>\n      ): void {\n        if (_chart.value !== null) {\n          chartDestroy<TType, TData, TLabel>(toRaw(_chart.value), context)\n        }\n\n        if (canvasEl.value === null) {\n          throw new Error(templateError)\n        } else {\n          const chartData = getChartData<TType, TData, TLabel>(\n            data,\n            props.datasetIdKey\n          )\n          const canvasEl2DContext = canvasEl.value.getContext('2d')\n\n          if (canvasEl2DContext !== null) {\n            _chart.value = new ChartJS<TType, TData, TLabel>(\n              canvasEl2DContext,\n              {\n                type: chartType,\n                data: isProxy(data) ? new Proxy(chartData, {}) : chartData,\n                options,\n                plugins: props.plugins\n              }\n            )\n          }\n        }\n      }\n\n      function chartDataHandler(\n        newValue: TChartData<TType, TData, TLabel>,\n        oldValue: TChartData<TType, TData, TLabel>\n      ): void {\n        const newData = isProxy(newValue) ? toRaw(newValue) : { ...newValue }\n        const oldData = isProxy(oldValue) ? toRaw(oldValue) : { ...oldValue }\n\n        if (Object.keys(oldData).length > 0) {\n          const chart = toRaw(_chart.value)\n\n          const isEqualLabelsAndDatasetsLength = compareData<\n            TType,\n            TData,\n            TLabel\n          >(newData, oldData)\n\n          if (isEqualLabelsAndDatasetsLength && chart !== null) {\n            setChartDatasets<TType, TData, TLabel>(\n              chart?.data,\n              newData,\n              props.datasetIdKey\n            )\n\n            if (newData.labels !== undefined) {\n              setChartLabels<TType, TData, TLabel>(\n                chart,\n                newData.labels,\n                context\n              )\n            }\n\n            updateChart()\n          } else {\n            if (chart !== null) {\n              chartDestroy<TType, TData, TLabel>(chart, context)\n            }\n\n            chartCreate<TType, TData, TLabel>(\n              renderChart,\n              props.chartData,\n              props.chartOptions as ChartOptions<TType>,\n              context\n            )\n          }\n        } else {\n          if (_chart.value !== null) {\n            chartDestroy<TType, TData, TLabel>(toRaw(_chart.value), context)\n          }\n\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      }\n\n      function chartOptionsHandler(options: TChartOptions<TType>): void {\n        const chart = toRaw(_chart.value)\n\n        if (chart !== null) {\n          setChartOptions<TType, TData, TLabel>(chart, options)\n          updateChart()\n        } else {\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      }\n\n      function updateChart(): void {\n        const chart = toRaw(_chart.value)\n\n        if (chart !== null) {\n          chartUpdate<TType, TData, TLabel>(chart, context)\n        } else {\n          console.error(chartUpdateError)\n        }\n      }\n\n      watch(\n        () => props.chartData,\n        (\n          newValue: TChartData<TType, TData, TLabel>,\n          oldValue: TChartData<TType, TData, TLabel>\n        ) => chartDataHandler(newValue, oldValue),\n        { deep: true }\n      )\n\n      watch(\n        () => props.chartOptions,\n        newValue => chartOptionsHandler(newValue as ChartOptions<TType>),\n        { deep: true }\n      )\n\n      onMounted(() => {\n        if (\n          'datasets' in props.chartData &&\n          props.chartData.datasets.length > 0\n        ) {\n          chartCreate<TType, TData, TLabel>(\n            renderChart,\n            props.chartData,\n            props.chartOptions as ChartOptions<TType>,\n            context\n          )\n        }\n      })\n\n      onBeforeUnmount(() => {\n        if (_chart.value !== null) {\n          chartDestroy(toRaw(_chart.value), context)\n        }\n      })\n\n      context.expose({\n        chart: _chart,\n        updateChart\n      })\n\n      return () =>\n        h('div', { style: props.styles, class: props.cssClasses }, [\n          h('canvas', {\n            id: props.chartId,\n            width: props.width,\n            height: props.height,\n            ref: canvasEl\n          })\n        ])\n    }\n  }) as any\n\nexport const Bar = /* #__PURE__ */ generateChart(\n  'bar-chart',\n  'bar',\n  BarController\n)\n\nexport const Doughnut = /* #__PURE__ */ generateChart(\n  'doughnut-chart',\n  'doughnut',\n  DoughnutController\n)\n\nexport const Line = /* #__PURE__ */ generateChart(\n  'line-chart',\n  'line',\n  LineController\n)\n\nexport const Pie = /* #__PURE__ */ generateChart(\n  'pie-chart',\n  'pie',\n  PieController\n)\n\nexport const PolarArea = /* #__PURE__ */ generateChart(\n  'polar-chart',\n  'polarArea',\n  PolarAreaController\n)\n\nexport const Radar = /* #__PURE__ */ generateChart(\n  'radar-chart',\n  'radar',\n  RadarController\n)\n\nexport const Bubble = /* #__PURE__ */ generateChart(\n  'bubble-chart',\n  'bubble',\n  BubbleController\n)\n\nexport const Scatter = /* #__PURE__ */ generateChart(\n  'scatter-chart',\n  'scatter',\n  ScatterController\n)\n\nexport default {\n  Bar,\n  Doughnut,\n  Line,\n  Pie,\n  PolarArea,\n  Radar,\n  Bubble,\n  Scatter\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}