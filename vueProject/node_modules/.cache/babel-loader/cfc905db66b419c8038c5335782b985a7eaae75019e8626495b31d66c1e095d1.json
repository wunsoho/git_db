{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx } from \"vue\";\nimport _imports_0 from '@/assets/LockGroup.png';\nconst _hoisted_1 = {\n  class: \"group-tree\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"권한 따라 잠금\",\n  class: \"lock-group\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"group-lock-guide\"\n}, \"회사 조직을 설계하세요\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_GroupTreeNode = _resolveComponent(\"GroupTreeNode\");\n  const _component_blocks_tree = _resolveComponent(\"blocks-tree\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 임시 \"), _ctx.IfTreeNull ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createCommentVNode(\" 그룹이 없으면 보여줌 \"), _hoisted_3, _hoisted_4, _createElementVNode(\"button\", {\n    class: \"add-group-button-Intree\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.OnEditGroup && _ctx.OnEditGroup(...args)),\n    type: \"button\"\n  }, \"+ 추가하기\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createCommentVNode(\" 그룹이 있으면 그룹 보여줌 \"), _createVNode(_component_blocks_tree, {\n    id: \"tree\",\n    data: _ctx.treeData,\n    horizontal: _ctx.treeOrientation == '1',\n    collapsable: true,\n    props: {\n      label: 'label',\n      expand: 'expand',\n      children: 'Children',\n      key: 'id'\n    }\n  }, {\n    node: _withCtx(({\n      data\n    }) => [_createVNode(_component_GroupTreeNode, {\n      Scope1: data.Scope1,\n      Scope2: data.Scope2,\n      Scope3: data.Scope3,\n      manager: data.Chief,\n      level: data.id,\n      GroupName: data.label\n    }, null, 8 /* PROPS */, [\"Scope1\", \"Scope2\", \"Scope3\", \"manager\", \"level\", \"GroupName\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"data\", \"horizontal\"])]))]);\n}","map":{"version":3,"names":["_imports_0","class","_createElementVNode","src","alt","_createElementBlock","_hoisted_1","_createCommentVNode","_ctx","IfTreeNull","_hoisted_2","_hoisted_3","_hoisted_4","onClick","_cache","args","OnEditGroup","type","_hoisted_5","_createVNode","_component_blocks_tree","id","data","treeData","horizontal","treeOrientation","collapsable","props","label","expand","children","key","node","_withCtx","_component_GroupTreeNode","Scope1","Scope2","Scope3","manager","Chief","level","GroupName"],"sources":["C:\\Users\\ohminjin\\Desktop\\캡스톤\\co2-emission-management\\vueProject\\src\\components\\groups\\Group-tree.vue"],"sourcesContent":["<template>\r\n    <div class=\"group-tree\">\r\n         <!-- 임시 -->\r\n        <div v-if=\"IfTreeNull\"><!-- 그룹이 없으면 보여줌 -->\r\n          <img src=\"@/assets/LockGroup.png\" alt=\"권한 따라 잠금\" class=\"lock-group\">\r\n          <span class=\"group-lock-guide\">회사 조직을 설계하세요</span>\r\n          <button class=\"add-group-button-Intree\" @click=\"OnEditGroup\" type=\"button\">+ 추가하기</button>\r\n        </div>\r\n        <div v-else><!-- 그룹이 있으면 그룹 보여줌 -->\r\n          <blocks-tree  id=\"tree\" :data=\"treeData\" :horizontal=\"treeOrientation=='1'\" :collapsable=\"true\" :props=\"{label: 'label', expand: 'expand', children: 'Children',  key:'id'}\">\r\n            <template #node=\"{data}\" id=\"tree2\" >\r\n                <GroupTreeNode :Scope1=data.Scope1 :Scope2=data.Scope2 :Scope3=data.Scope3 :manager=data.Chief :level=data.id :GroupName=data.label></GroupTreeNode>\r\n            </template>\r\n         </blocks-tree>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n.group-tree{\r\n    min-height: 86vh;   /*header랑 합쳐서 100이 되어야 함*/\r\n    height: inherit;\r\n    position: relative;\r\n    /* 점 배경 */\r\n    background-image: linear-gradient(to bottom, transparent, transparent 10%, #F7F9FB 10%),\r\n      linear-gradient(to right, rgba(0, 0, 0, 0.342), rgba(0, 0, 0, 0.103) 3%, #F7F9FB 10%);\r\n    background-size: 20px 20px;\r\n\r\n    text-align: center;\r\n    max-width: 85vw;\r\n  }\r\n  .lock-group{\r\n    width: 150px;\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 40%;\r\n    transform: translate(-50%,-50%);\r\n  }\r\n  .group-lock-guide{\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 42%;\r\n    transform: translate(-50%,-50%);\r\n  }\r\n  .add-group-button-Intree{\r\n    width: 110px;\r\n    height: 3.5vh;\r\n    background: #3DC984;\r\n    border: none;\r\n    border-radius: 8px;\r\n    font-weight: 600;\r\n    font-size: 13px;\r\n    \r\n    color: #FFFFFF;\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 30%;\r\n    transform: translate(-50%,-50%);\r\n  }\r\n  #tree{\r\n    background: none;\r\n    margin-top: 4vh;\r\n  }\r\n  .org-tree-node-label-inner{\r\n    box-shadow:none !important ;\r\n    padding: 0 !important;\r\n  }\r\n</style>\r\n\r\n\r\n<script>\r\nimport { useStore } from \"vuex\";\r\nimport { defineComponent,ref,reactive,onMounted} from 'vue';\r\nimport GroupTreeNode from \"./GroupTreeNode.vue\"\r\nimport axios from \"axios\";\r\nimport { useRouter } from \"vue-router\";\r\n    export default defineComponent({\r\n       async setup(){\r\n          const store = useStore(); //vuex 사용\r\n          const router = useRouter();\r\n          \r\n          const OnEditGroup = () => store.commit(\"OnEdit\", );\r\n          var IfTreeNull=ref(false);\r\n          function change(){\r\n            console.log(this.IfTreeNull)\r\n            this.IfTreeNull = !this.IfTreeNull\r\n          }\r\n\r\n          let selected = ref([]);\r\n          let treeOrientation = ref(\"0\"); //수직 or수평\r\n          var treeData = ref({}) \r\n          let testtree = ref({\r\n              label: 'root',\r\n              expand: true,\r\n              some_id: 1,\r\n              Chief:'하하',\r\n              Scope1:1,\r\n              Children: [\r\n                  { label: '상경대학', some_id: 2, Chief:'히히',something:'ㅇㅈㅁㅇㅁㅈㅇ'},\r\n                  { label: '자연대학', some_id: 3, Chief:'호호',},\r\n                  { \r\n                      label: '공과대학', \r\n                      some_id: 4, \r\n                      expand: false, \r\n                      Children: [\r\n                          { label: '항공소프트웨어공학과', some_id: 5 },\r\n                          {  \r\n                              label: '기계공학과', \r\n                              some_id: 6, \r\n                              expand: false, \r\n                              Children: [\r\n                                  { label: 'subchild 11', some_id: 7 },\r\n                                  { label: 'subchild 22', some_id: 8 },\r\n                              ]\r\n                          },\r\n                      ]\r\n                  },\r\n              ],\r\n          });\r\n          \r\n          const config = {\r\n            headers:{\r\n              Authorization:\"Bearer\"+\" \"+store.state.accessToken,\r\n              \"Content-Type\": \"text/html; charset=utf-8\",\r\n            }\r\n          }\r\n          async function get_tree(){\r\n              await axios.get(\"/Company/Organization/samsung\",config).then(res => {\r\n                    console.log(res.data)\r\n                    treeData = res.data\r\n                    store.commit(\"SetGroupTree\",res.data);\r\n\r\n                })\r\n                .catch(error => {\r\n                  alert(\"로그인 시간이 만료되었습니다.\")\r\n                  console.log(error)\r\n                  router.push('/');\r\n                })\r\n                .finally(() => {\r\n                  console.log(\"lender1\")\r\n                  //treeData = testtree\r\n                })\r\n            }\r\n\r\n            await get_tree()\r\n\r\n        return {\r\n          get_tree,\r\n          treeData,\r\n          selected,\r\n          treeOrientation,\r\n          OnEditGroup,\r\n          IfTreeNull,change,testtree\r\n          }\r\n        },\r\n        name :\"Group-tree\",\r\n        components:{\r\n            GroupTreeNode\r\n        },\r\n        created(){     \r\n       },   \r\n    })\r\n</script>"],"mappings":";OAIeA,UAA4B;;EAHlCC,KAAK,EAAC;AAAY;;;;gCAGjBC,mBAAA,CAAoE;EAA/DC,GAA4B,EAA5BH,UAA4B;EAACI,GAAG,EAAC,UAAU;EAACH,KAAK,EAAC;;gCACvDC,mBAAA,CAAkD;EAA5CD,KAAK,EAAC;AAAkB,GAAC,cAAY;;;;;;;uBAJjDI,mBAAA,CAcM,OAdNC,UAcM,GAbDC,mBAAA,QAAW,EACDC,IAAA,CAAAC,UAAU,I,cAArBJ,mBAAA,CAIM,OAAAK,UAAA,GAJiBH,mBAAA,iBAAoB,EACzCI,UAAoE,EACpEC,UAAkD,EAClDV,mBAAA,CAA0F;IAAlFD,KAAK,EAAC,yBAAyB;IAAEY,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEP,IAAA,CAAAQ,WAAA,IAAAR,IAAA,CAAAQ,WAAA,IAAAD,IAAA,CAAW;IAAEE,IAAI,EAAC;KAAS,QAAM,E,oBAEnFZ,mBAAA,CAMM,OAAAa,UAAA,GANMX,mBAAA,oBAAuB,EACjCY,YAAA,CAIaC,sBAAA;IAJCC,EAAE,EAAC,MAAM;IAAEC,IAAI,EAAEd,IAAA,CAAAe,QAAQ;IAAGC,UAAU,EAAEhB,IAAA,CAAAiB,eAAe;IAAQC,WAAW,EAAE,IAAI;IAAGC,KAAK,EAAE;MAAAC,KAAA;MAAAC,MAAA;MAAAC,QAAA;MAAAC,GAAA;IAAA;;IAC3FC,IAAI,EAAAC,QAAA,CACX,CAAoJ;MADtIX;IAAI,OAClBH,YAAA,CAAoJe,wBAAA;MAApIC,MAAM,EAACb,IAAI,CAACa,MAAM;MAAEC,MAAM,EAACd,IAAI,CAACc,MAAM;MAAEC,MAAM,EAACf,IAAI,CAACe,MAAM;MAAEC,OAAO,EAAChB,IAAI,CAACiB,KAAK;MAAEC,KAAK,EAAClB,IAAI,CAACD,EAAE;MAAEoB,SAAS,EAACnB,IAAI,CAACM"},"metadata":{},"sourceType":"module","externalDependencies":[]}