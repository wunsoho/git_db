{"ast":null,"code":"//vuex 설정 파일 \nimport { createStore } from \"vuex\";\nimport axios from \"axios\";\nimport VueCookies from 'vue-cookies';\nimport createPersistedState from 'vuex-persistedstate';\nexport default createStore({\n  plugins: [createPersistedState({\n    storage: window.sessionStorage // store를 session storage에 유지\n  })],\n\n  state: {\n    addMember: false,\n    addPublic: false,\n    addResearch: false\n  }\n  //상태 접근 (변경)\n  ,\n  mutations: {\n    openAddMember(state) {\n      state.addMember = true;\n    }\n  },\n  //전처리 후 Mutations에 데이터 전달\n  actions: {\n    login: ({\n      commit\n    }, params) => {\n      return axios.post('/User/Login', params).then(res => {\n        commit('loginToken', res.data.auth_info);\n      }).catch(err => {\n        console.log(err.message);\n      });\n    },\n    refreshToken: ({\n      commit\n    }) => {\n      // accessToken 재요청\n      //accessToken 만료로 재발급 후 재요청시 비동기처리로는 제대로 처리가 안되서 promise로 처리함\n      return new Promise((resolve, reject) => {\n        axios.post('/v1/auth/certify').then(res => {\n          commit('refreshToken', res.data.auth_info);\n          resolve(res.data.auth_info);\n        }).catch(err => {\n          console.log('refreshToken error : ', err.config);\n          reject(err.config.data);\n        });\n      });\n    },\n    logout: ({\n      commit\n    }) => {\n      // 로그아웃\n      commit('removeToken');\n      location.reload();\n    }\n    // set_group_list: function (origin_json_list) {\n    //     var temp_list = []   \n\n    //     while(origin_json_list != null){\n    //         temp_list.push(origin_json_list.lable)\n    //         origin_json_list = origin_json_list.Children\n    //     } \n    //     console.log((temp_list)+\"액션리스트\")\n    //     return \n    //   },\n  },\n\n  //상태 모듈화\n  modules: {}\n});\n\n// 참고 링크\n//https://velog.io/@latte_h/Vue3-Guide-12-Vuex","map":{"version":3,"names":["createStore","axios","VueCookies","createPersistedState","plugins","storage","window","sessionStorage","state","addMember","addPublic","addResearch","mutations","openAddMember","actions","login","commit","params","post","then","res","data","auth_info","catch","err","console","log","message","refreshToken","Promise","resolve","reject","config","logout","location","reload","modules"],"sources":["/home/hyemi/bigsysWeb/wp-bigsys/src/vueProject/src/store.js"],"sourcesContent":["//vuex 설정 파일 \nimport { createStore } from \"vuex\";\nimport axios from \"axios\";\nimport VueCookies from 'vue-cookies';\nimport createPersistedState from 'vuex-persistedstate';\n\nexport default createStore({\n    plugins: [\n        createPersistedState({\n          storage: window.sessionStorage, // store를 session storage에 유지\n        })\n    ],\n    state: {\n        addMember:false,\n        addPublic:false,\n        addResearch:false,\n    } \n    //상태 접근 (변경)\n    ,mutations:{\n        openAddMember (state) {\n          state.addMember = true\n        },\n    },\n    //전처리 후 Mutations에 데이터 전달\n    actions:{\n        login: ({commit}, params) => {\n            return axios.post('/User/Login', params).then(res => {\n                    commit('loginToken', res.data.auth_info);\n                })\n                .catch(err => {\n                    console.log(err.message);\n\n                });\n        },\n\n        refreshToken: ({commit}) => { // accessToken 재요청\n        //accessToken 만료로 재발급 후 재요청시 비동기처리로는 제대로 처리가 안되서 promise로 처리함\n        return new Promise((resolve, reject) => {\n            axios.post('/v1/auth/certify').then(res => {\n                commit('refreshToken', res.data.auth_info);\n                resolve(res.data.auth_info);\n                }).catch(err => {\n                console.log('refreshToken error : ', err.config);\n                reject(err.config.data);\n            })\n        })\n        },\n        logout: ({commit}) => { // 로그아웃\n            commit('removeToken');\n            location.reload();\n        },\n        // set_group_list: function (origin_json_list) {\n        //     var temp_list = []   \n            \n        //     while(origin_json_list != null){\n        //         temp_list.push(origin_json_list.lable)\n        //         origin_json_list = origin_json_list.Children\n        //     } \n        //     console.log((temp_list)+\"액션리스트\")\n        //     return \n        //   },\n    },\n    //상태 모듈화\n    modules:{\n\n    }\n});\n\n\n// 참고 링크\n//https://velog.io/@latte_h/Vue3-Guide-12-Vuex"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAOC,oBAAoB,MAAM,qBAAqB;AAEtD,eAAeH,WAAW,CAAC;EACvBI,OAAO,EAAE,CACLD,oBAAoB,CAAC;IACnBE,OAAO,EAAEC,MAAM,CAACC,cAAc,CAAE;EAClC,CAAC,CAAC,CACL;;EACDC,KAAK,EAAE;IACHC,SAAS,EAAC,KAAK;IACfC,SAAS,EAAC,KAAK;IACfC,WAAW,EAAC;EAChB;EACA;EAAA;EACCC,SAAS,EAAC;IACPC,aAAaA,CAAEL,KAAK,EAAE;MACpBA,KAAK,CAACC,SAAS,GAAG,IAAI;IACxB;EACJ,CAAC;EACD;EACAK,OAAO,EAAC;IACJC,KAAK,EAAEA,CAAC;MAACC;IAAM,CAAC,EAAEC,MAAM,KAAK;MACzB,OAAOhB,KAAK,CAACiB,IAAI,CAAC,aAAa,EAAED,MAAM,CAAC,CAACE,IAAI,CAACC,GAAG,IAAI;QAC7CJ,MAAM,CAAC,YAAY,EAAEI,GAAG,CAACC,IAAI,CAACC,SAAS,CAAC;MAC5C,CAAC,CAAC,CACDC,KAAK,CAACC,GAAG,IAAI;QACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,OAAO,CAAC;MAE5B,CAAC,CAAC;IACV,CAAC;IAEDC,YAAY,EAAEA,CAAC;MAACZ;IAAM,CAAC,KAAK;MAAE;MAC9B;MACA,OAAO,IAAIa,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpC9B,KAAK,CAACiB,IAAI,CAAC,kBAAkB,CAAC,CAACC,IAAI,CAACC,GAAG,IAAI;UACvCJ,MAAM,CAAC,cAAc,EAAEI,GAAG,CAACC,IAAI,CAACC,SAAS,CAAC;UAC1CQ,OAAO,CAACV,GAAG,CAACC,IAAI,CAACC,SAAS,CAAC;QAC3B,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;UAChBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEF,GAAG,CAACQ,MAAM,CAAC;UAChDD,MAAM,CAACP,GAAG,CAACQ,MAAM,CAACX,IAAI,CAAC;QAC3B,CAAC,CAAC;MACN,CAAC,CAAC;IACF,CAAC;IACDY,MAAM,EAAEA,CAAC;MAACjB;IAAM,CAAC,KAAK;MAAE;MACpBA,MAAM,CAAC,aAAa,CAAC;MACrBkB,QAAQ,CAACC,MAAM,EAAE;IACrB;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EACD;EACAC,OAAO,EAAC,CAER;AACJ,CAAC,CAAC;;AAGF;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}